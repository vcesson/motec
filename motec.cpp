#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/background_segm.hpp>
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <vector>
#include <sstream>
#include <stdio.h>
 
using namespace cv;
using namespace std;

void thresh_callback(int, void* );

Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
int thresh = 100;
int max_thresh = 255;
RNG rng(12345);

int main(int argc, char *argv[])
{
    Mat frame;
    VideoCapture cap(0);
    Ptr<BackgroundSubtractor> pMOG2;
    pMOG2 = createBackgroundSubtractorMOG2(200, 16, false); //MOG2 approach

    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;
    
//    namedWindow("Frame");
    namedWindow("Background");
 
    for(;;)
    {
        cap >> frame;
        pMOG2->apply(frame, fgMaskMOG2);
        erode(fgMaskMOG2, fgMaskMOG2, Mat());
        dilate(fgMaskMOG2, fgMaskMOG2, Mat());
        //findContours(fgMaskMOG2, contours, hierarchy, 0, 0, Point(0, 0) );
        //drawContours(fgMaskMOG2, contours, 0, Scalar(0,0,255), 2, 8, hierarchy, 0, Point() );
        rectangle(fgMaskMOG2, Point(0, 0), Point(300, 300), Scalar(100, 100, 255));
        //imshow("Frame", frame);
        imshow("Background", fgMaskMOG2);
        thresh_callback(0, 0);

        if(waitKey(100) >= 0) break;
    }
    return 0;
}

/** @function thresh_callback */
void thresh_callback(int, void* )
{
  Mat canny_output;
  vector<vector<Point> > contours;
  vector<Vec4i> hierarchy;

  /// Find contours
  findContours(fgMaskMOG2, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));
  /// Get the moments
  vector<Moments> mu(contours.size());
  for(int i = 0; i < contours.size(); i++)
     { mu[i] = moments(contours[i], false ); }

  ///  Get the mass centers:
  vector<Point2f> mc( contours.size() );
  for( int i = 0; i < contours.size(); i++ )
     { mc[i] = Point2f( mu[i].m10/mu[i].m00 , mu[i].m01/mu[i].m00 ); }

  /// Draw contours
  Mat drawing = Mat::zeros( fgMaskMOG2.size(), CV_8UC3 );
  for( int i = 0; i< contours.size(); i++ )
     {
       Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
       drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, Point() );
       circle( drawing, mc[i], 4, color, -1, 8, 0 );
     }

  /// Show in a window
  namedWindow("Contours");
  imshow( "Contours", drawing );
/*
  /// Calculate the area with the moments 00 and compare with the result of the OpenCV function
  printf("\t Info: Area and Contour Length \n");
  for( int i = 0; i< contours.size(); i++ )
     {
       printf(" * Contour[%d] - Area (M_00) = %.2f - Area OpenCV: %.2f - Length: %.2f \n", i, mu[i].m00, contourArea(contours[i]), arcLength( contours[i], true ) );
       Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
       drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, Point() );
       circle( drawing, mc[i], 4, color, -1, 8, 0 );
     }*/
}
